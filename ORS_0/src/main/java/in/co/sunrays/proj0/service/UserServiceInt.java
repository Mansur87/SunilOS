package in.co.sunrays.proj0.service;

import java.util.List;

import in.co.sunrays.proj0.dto.RoleDTO;
import in.co.sunrays.proj0.dto.UserDTO;
import in.co.sunrays.proj0.exception.ApplicationException;
import in.co.sunrays.proj0.exception.DuplicateRecordException;

/**
 * User Service interface.
 * 
 * @author SessionFacade
 * @version 1.0 Copyright (c) SessionFacade
 */
public interface UserServiceInt {

	/**
	 * Add a User
	 * 
	 * @param dto:
	 * 				Object of UserDTO
	 * @return pk:
	 * 				Primary Key
	 * 
	 * @throws DuplicateRecordException when UserId already Exist.
	 */
	public long add(UserDTO dto)throws DuplicateRecordException;
	
	/**
	 * Register a User
	 * 
	 * @param dto:
	 * 				Object of UserDTO
	 * @return pk:
	 * 				Primary Key
	 * 
	 * @throws DuplicateRecordException when UserId already exist.
	 */
	public long registerUser(UserDTO dto)throws DuplicateRecordException;
	
	/**
	 * Update a User
	 * 
	 * @param dto:
	 * 				Object of UserDTO
	 * 
	 * @throws DuplicateRecordException when UserId already exist.
	 */
	public void update(UserDTO dto)throws DuplicateRecordException;
	
	/**
	 * Delete a User
	 * 
	 * @param id:
	 * 				Primary Key
	 */
	public void delete(long id);
	
	/**
	 * Find User by Login
	 * 
	 * @param login:
	 * 				User Login Id
	 * @return dto:
	 * 				Object of UserDTO
	 */
	public UserDTO findByLogin(String login);
	
	/**
	 * Find User by PK
	 * 
	 * @param pk:
	 * 				Primary Key
	 * @return dto:
	 * 				Object of UserDTO
	 */
	public UserDTO findByPK(long pk);
	
	/**
	 * Search user with pagination
	 * 
	 * @param dto:
	 * 				Object of UserDTO
	 * @param pageNo:
	 * 					PageNo
	 * @param pageSize:
	 * 					PageSize
	 * @return list:
	 * 					List of User
	 */
	public List search(UserDTO dto, int pageNo, int pageSize);
	
	/**
	 * Search user
	 * 
	 * @param dto:
	 * 				Object of UserDTO
	 * @return list:
	 * 				List of User
	 */
	public List search(UserDTO dto);
	
	/**
	 * Change password of the user
	 * 
	 * @param id:
	 * 			Primary Key
	 * @param oldPassword:
	 * 						User Old Password
	 * @param newPassword :
	 * 						User new Password
	 * @return flag:
	 * 				A boolean value
	 * 
	 * @throws DuplicateRecordException when UserId already exist.
	 */
	public boolean changePassword(long id, String oldPassword, String newPassword)throws DuplicateRecordException;
	
	/**
	 * User authentication
	 * 
	 * @param dto:
	 * 				Object of UserDTO
	 * @return dto:
	 * 				Object of UserDTO
	 */
	public UserDTO authenticate(String login,String password);
	
	/**
	 * Lock User for certain time duration
	 * 
	 * @param login:
	 * 				User Login Id
	 * @return flag:
	 * 				A boolean value
	 */
	public boolean lock(String login);
	
	/**
	 * Reset password of the user with autogenerated password
	 * 
	 * @param login:
	 * 				User login id
	 * @return flag:
	 * 				A boolean value
	 * 
	 * @throws ApplicationException when there is a logical error.
	 */
	public boolean resetPassword(String login)throws ApplicationException;
	
	/**
	 * Send the password of user to his email
	 * 
	 * @param login:
	 * 				User Login Id
	 * @return flag:
	 * 				A boolean value
	 * 
	 * @throws ApplicationException when there is a logical error.
	 */
	public boolean forgetPassword(String login)throws ApplicationException;
	
	/**
	 * Get user roles
	 * 
	 * @param dto:
	 * 				Object of UserDTO
	 * @return rdto:
	 * 				Object of RoleDTO
	 */
	public RoleDTO getRole(UserDTO dto);
	
	/**
	 * Update User access
	 * 
	 * @param dto:
	 * 				Object of UserDTO
	 * @return dto:
	 * 				Object of UserDTO
	 */
	public UserDTO updateAccess(UserDTO dto);
}
